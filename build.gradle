plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
    id 'org.jetbrains.kotlin.jvm'
}

group = 'ar.caes'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"
    annotationProcessor "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"
    // ... (other implementation dependencies)

    implementation 'io.javalin:javalin:6.4.0'

    // Add this so test sources can resolve Velocity classes:
    testImplementation "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"

    // Javalin and other dependencies ...

    // Add OkHttp for HTTP calls in tests:
    testImplementation "com.squareup.okhttp3:okhttp:4.10.0"
    // Add a simple JSON library:
    testImplementation 'org.json:json:20231013'
    // Test dependencies:
    testImplementation "org.junit.jupiter:junit-jupiter:5.9.3"
    testImplementation "io.mockk:mockk:1.13.2"
    implementation("org.slf4j:slf4j-simple:2.0.16")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.15.0")

}


def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

// Configure the test task to use JUnit Platform (JUnit 5)
tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
kotlin {
    jvmToolchain(17)
}
